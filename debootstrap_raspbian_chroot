#!/bin/bash
# (c) boris@steki.net (GPL-3.0+)
# Basic config...
################ WARNING ############################
# THIS CHROOT VAR MUST BE SET !!!!!!!! be warned or it WILL break your system :)
CHROOT=${CHROOT:-"/opt/db_raspbian"}
CACHE_DIR=${CACHE_DIR:-"/opt"}
# use mirrorbrain be nice to raspbian project...
MIRROR=http://mirrordirector.raspbian.org/raspbian
#MIRROR=http://archive.raspbian.org/raspbian
RBINS="curl"
XBINS="true false ls sort cp make chmod chown grep gunzip gzip mkdir mktemp rm sed seq"
XBINS+=" debootstrap tar m4 test uniq xargs xz fold md5sum bash unzip wget"
# binaries which arm binaries in chrooted environment
QEMU_BINARIES="qemu-arm qemu-arm-binfmt qemu-arm-static"
# which packages you would like to have in chroot environment by default
INSTALL_ADDITIONAL_PACKAGES=${INSTALL_ADDITIONAL_PACKAGES:-0}
ADDITIONAL_PACKAGES="coreutils less sudo gawk"
ADDITIONAL_PACKAGES+=" gcc g++ gettext libc6-dev git git-core"
ADDITIONAL_PACKAGES+=" autoconf automake devscripts libtool make pkg-config"

### Packages
#####################################################################

function require_packages () {
	local OLD_IFS="${IFS:- }"
	IFS=" "
	ADDITIONAL_PACKAGES+=" "
	ADDITIONAL_PACKAGES+="$*"
	IFS="${OLD_IFS}"
}

module:texteditor () { require_packages joe; }
module:openssh    () { require_packages openssh-client openssh-server; }
module:db 		  () { require_packages libsqlite3-dev libgdbm-dev libdb-dev; }
module:misc       () { require_packages libjpeg62-dev libncurses5-dev; }
module:perl       () { require_packages libperl-dev; }
module:python     () { require_packages python-dev; }

variant:default   () {
	DEBOOTSTRAP_VARIANT=''
	DEBOOTSTRAP_INCLUDE=''
}

variant:minbase   () {
	DEBOOTSTRAP_VARIANT='minbase'
	DEBOOTSTRAP_INCLUDE='iproute,iputils-ping'
}

### Settings
#####################################################################

variant:minbase

if [ ${INSTALL_ADDITIONAL_PACKAGES} -eq 1 ]; then
	module:texteditor
	module:openssh
	module:db
	module:misc
	module:perl
	module:python
fi

### Runtime
#####################################################################

# Exit on error. Append ||true if you expect an error.
# set -e is safer than #!/bin/bash -e because that is neutralised if
# someone runs your script like `bash yourscript.sh`
set -o errexit
set -o nounset

# Inherit the ERR trap to functions and subshells
set -o errtrace

### Utilities
#####################################################################

function do_log {
	echo "$(date +'%Y-%m-%d %T') $1"
}

function ch_exec () {
	chroot ${CHROOT} bash -c "$1"
}

function get_lib () {
	echo $(ldconfig -p|grep $1|grep '>'|cut -d '>' -f 2)
}

function get_ldd_lib () {
	echo $(ldd $1 |grep '> /'|cut -d ' ' -f 3)
}

function git_archive_download () {
	local download_url="$1"
	local target_file="$2"
	local needs_download=1

	# We have to use a workaround until GitHub supports
	# If-None-Match for the archive downloads.
	if [ -f "${target_file}" ]; then
		# Target file already exists
		local local_commit_id=`unzip -qqq -z "${target_file}"`
		local remote_commit_id=`curl --silent --fail --location --head --url "${download_url}" | sed -n '/ETag: \(.*\)"/ s/ETag: "\(.*\)"/\1/ p'`

		if [ "${local_commit_id}" == "${remote_commit_id}" ]; then
			needs_download=0
		fi
	fi

	if [ ${needs_download} -eq 1 ]; then
		curl --location --output "${target_file}" --url "${download_url}"
	fi
}

function print_stacktrace () {
  local frame=0
  while caller ${frame}; do
	frame=$((frame+1));
  done
}

function log_on_error() {
	do_log "An error happened."
	echo "=== Stacktrace ==="
	print_stacktrace
	echo "=================="
}
trap log_on_error ERR

OLD_CWD=`pwd`
function cleanup_before_exit () {
  do_log "Cleaning up. Done"
  cd ${OLD_CWD}
}
trap cleanup_before_exit EXIT

### Actual chroot creation code
#####################################################################

# Emulate correct arm CPU
QEMU_CPU=arm1176
LC_ALL=C
export CHROOT XBINS QEMU_CPU LC_ALL ADDITIONAL_PACKAGES MIRROR

# ===========
# Build steps
# ===========

# -----------------------------------------------
# Execute all of the steps declared below
# (i.e. all functions prefixed with "section:")
# -----------------------------------------------
:all() {
	section:prepare_environment
	section:prepare_emulation
	section:setup_debootstrap
	section:install_required_software
	section:apply_additional_patches
	section:cleanup

	do_log "Everything done enjoy"
}

# NOTE: See at the bottom for the :all invocation

# -------------------------------------
# Validate the run environment
# and create the ${CHROOT} directory
# -------------------------------------
section:prepare_environment() {
	__validate_host_binaries
	__validate_is_root
	__validate_chroot_parameter
	__create_chroot_dir
}

__validate_host_binaries() {
	# sanity check of native host binaries
	for program in ${XBINS} ${RBINS}; do
		which ${program} > /dev/null 2> /dev/null
		if [ $? -ne 0 ]; then
			do_log "missing '${program}' on your host machine please install it" && exit -1
		fi
	done
}

__validate_is_root() {
	if [ $(id -u) -ne 0 ]; then
		do_log "Sorry must run as root" && exit -1
	fi
}

__validate_chroot_parameter() {
	# Sanity check that the CHROOT variable is really set
	if [ -z "${CHROOT:-}" ]; then
		do_log "CHROOT variable must be set" && exit -1
	fi
}

__create_chroot_dir() {
	# let's make sure chroot dir is there
	if [ ! -d "${CHROOT}" ]; then
	  mkdir -p "${CHROOT}"
	fi
}

# -----------------------------------------------
# Prepare QEMU on the host and inside the chroot
# to be able to execute ARM binaries
# -----------------------------------------------
section:prepare_emulation() {
	__validate_binfmt
	__validate_and_prepare_qemu
}

__validate_binfmt() {
	# don't run if basic arm runtime system is not possible
	BINFMT_FOUND=0
	for fmt in  qemu-arm arm ;do
		if [ -f /proc/sys/fs/binfmt_misc/${fmt} ];then
			BINFMT_FOUND=$(($BINFMT_FOUND + 1))
		fi
	done
	if [ ${BINFMT_FOUND} -lt 1 ] ; then
		do_log "binfmt is not set please run your distribution setup procedure"
		do_log "binfmt support must be running for this to work...." && exit -1
	fi
}

__validate_and_prepare_qemu() {
	# initial preparation so arm binaries work without any issue
	mkdir -p "${CHROOT}/proc" "${CHROOT}/usr/bin" "${CHROOT}/usr/sbin"
	NOQEMU=0
	for qemu_bin in ${QEMU_BINARIES}; do
		if [ -x "$(which ${qemu_bin} 2>/dev/null)" ]; then
				cp -a "$(which ${qemu_bin})" "${CHROOT}/usr/bin/"
				NOQEMU=$(($NOQEMU + 1))
		fi
	done
	if [ ${NOQEMU} -eq 0 ] ; then
		do_log "You must have some of above mentioned binaries for this to work..." && exit -1
	fi
}

# -------------------------------------
# Run debootstrap to create a basic OS
# inside the chroot directory
# -------------------------------------
section:setup_debootstrap() {
	__mount_proc
	__setup_debootstrap_chroot
	__patch_policy_rc
	__patch_initctl
	__clean_apt
	__patch_apt_conf
}

__mount_proc() {
	__unmount_proc || true

	# mount proc as it is required by this process
	mount proc -t proc "${CHROOT}/proc" && do_log "Mounting proc on ${CHROOT}/proc"
}

__unmount_proc() {
	# unmount proc (called by section:cleanup)
	if umount -t proc "${CHROOT}/proc";
	then do_log "Unmount proc from ${CHROOT}/proc"
	else do_log "Failed to unmount proc from ${CHROOT}/proc"
	fi
}

__setup_debootstrap_chroot() {
	do_log "Calling debootstrap to setup the chroot environment..."

	local extra_args=""
	if [ ! -z ${DEBOOTSTRAP_VARIANT} ]; then
		extra_args+=" --variant=${DEBOOTSTRAP_VARIANT}"
	fi
	if [ ! -z ${DEBOOTSTRAP_INCLUDE} ]; then
		extra_args+=" --include=${DEBOOTSTRAP_INCLUDE}"
	fi

	set -x
	debootstrap --no-check-gpg --arch=armhf ${extra_args} --verbose wheezy ${CHROOT} ${MIRROR}
	set +x
}

__patch_policy_rc() {
	# don't run service on install
	cat > ${CHROOT}/usr/sbin/policy-rc.d << EOF
#!/bin/sh
echo "All runlevel operations denied by policy" >&2
exit 101
EOF

	chmod +x ${CHROOT}/usr/sbin/policy-rc.d
}

__patch_initctl() {
	# Based on https://github.com/docker/docker/blob/master/contrib/mkimage-debootstrap.sh
	# initctl (for some pesky upstart scripts)
	ch_exec "dpkg-divert --local --rename --add /sbin/initctl"
	ln -sf /bin/true ${CHROOT}/sbin/initctl
	# see https://github.com/docker/docker/issues/446#issuecomment-16953173
}

__clean_apt() {
	# Based on https://github.com/docker/docker/blob/master/contrib/mkimage-debootstrap.sh
	# shrink the image, since apt makes us fat (wheezy: ~157.5MB vs ~120MB)
	ch_exec "apt-get clean"
}

__patch_apt_conf() {
	# Based on https://github.com/docker/docker/blob/master/contrib/mkimage-debootstrap.sh
	cd ${CHROOT}

	# we want to effectively run "apt-get clean" after every install to keep images small (see output of "apt-get clean -s" for context)
	{
		aptGetClean='"rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true";'
		echo "DPkg::Post-Invoke { ${aptGetClean} };"
		echo "APT::Update::Post-Invoke { ${aptGetClean} };"
		echo 'Dir::Cache::pkgcache ""; Dir::Cache::srcpkgcache "";'
	} | sudo tee etc/apt/apt.conf.d/no-cache > /dev/null

	# and remove the translations, too
	echo 'Acquire::Languages "none";' | sudo tee etc/apt/apt.conf.d/no-languages > /dev/null
}

# -----------------------------------------------
# Install all required software components into
# the chroot, including gcc and other essentials
# -----------------------------------------------
section:install_required_software() {
	subsection:install_native_packages
	subsection:install_host_packages
}

# -----------------------------------------------
# Switch into the chroot and install the software
# required by later steps, as well as all of the
# packages specified by ALL_LIBS
# -----------------------------------------------
subsection:install_native_packages() {
	__install_packages
	__validate_chroot_creation
}

__install_packages() {
	# Get public key...
	wget http://archive.raspbian.org/raspbian.public.key -O ${CHROOT}/tmp/raspbian.public.key

	ch_exec 'apt-key add /tmp/raspbian.public.key'
	ch_exec 'apt-get update'
	ch_exec "apt-get -y --force-yes install m4 make wget ${ADDITIONAL_PACKAGES}"
}

__validate_chroot_creation() {
	ch_exec 'uname -a'
	if [ $? -ne 0 ]; then
		do_log "chroot not set correctly please check output of command from above" && exit -1
	fi
}

# ----------------------------------------------------
# Install a number of binaries which are native
# to the host into the chroot to achieve a better
# performance on CPU intensive tasks (e.g. compiling)
# ----------------------------------------------------
subsection:install_host_packages() {
	__determine_parameters
	__install_rpi_tools
	__copy_host_binaries_to_chroot
	__fix_libraries
}

__determine_parameters() {
	# ====================================
	# Determine host & target architecture
	# ====================================
	xarch=$(uname -m)
	carch=$(ch_exec 'uname -m')

	# add ld-linux loader to all libs first
	ALL_LIBS=$(ldconfig -p|egrep '(libnss_|ld-|libnsl|libz)'|cut -d '>' -f 2)
}

function fix_library() {
	local target_dir="${CHROOT}/$1/$2"
	local host_dir="${CHROOT}/$2"

	mv     "${target_dir}" "${target_dir}-orig"
	ln -sf "${host_dir}"   "${target_dir}"
}

__install_rpi_tools() {
	# ===========================================
	# Install the RPi cross compilation toolchain
	# ===========================================
	cd ${CHROOT}

	local master_zip_file="${CACHE_DIR}/master.zip"
	local toolchain_name="gcc-linaro-arm-linux-gnueabihf-raspbian-x64"
	local toolchain_dir="tools-master/arm-bcm2708/${toolchain_name}/arm-linux-gnueabihf"

	# Prepare cross compiler to be able to run it from chroot in "real" arm env
	###########(cd ${CHROOT} ; git clone https://github.com/raspberrypi/tools.git) ### way to slow....
	if [ -f /opt/master.zip ]; then
		cp /opt/master.zip ${CHROOT}
	else
		git_archive_download "https://github.com/raspberrypi/tools/archive/master.zip" "${master_zip_file}"
	fi

	#### security precaution for case that master.zip failed for some reason to be downloaded all destructive operations are done in correct place
	set -e
	(mkdir -p etc/dpkg/dpkg.cfg.d/; echo "force-unsafe-io" > etc/dpkg/dpkg.cfg.d/02apt-speedup)
	(mkdir -p usr ${toolchain_dir}/libc/usr)

	do_log "Unpacking compiler"
	(unzip -o ${master_zip_file})
	(ln -sf usr/tools-master/arm-bcm2708 usr/cross)

	do_log "Removing unneeded files"
	# gcc-linaro-arm-linux-gnueabihf-raspbian-x64
	(cd tools-master/arm-bcm2708; rm -rf arm-bcm2708hardfp-linux-gnueabi arm-bcm2708-linux-gnueabi)

	do_log "Fixing build root includes and libraries"
	fix_library ${toolchain_dir}/libc usr/lib
	fix_library ${toolchain_dir}/libc usr/include
	fix_library ${toolchain_dir}/libc lib

	do_log "Fixing compiler binaries names to be without triplets"
	(
	cd ${CHROOT}/${toolchain_dir}/bin;
	for old_name in *; do
		new_name=$(echo ${old_name}|sed -e 's/arm-linux-gnueabihf-//g')

		if [ "${old_name}" != "${new_name}" ]; then
			ln -sf ${old_name} ${new_name}
		fi
	done
	)

	ALL_LIBS=" ${ALL_LIBS} $(get_lib ld-linux.so.[2-3]) $(get_lib libstdc++.so.6) $(get_lib libz.so.1) $(get_lib libgcc_s.so.1)"
	ALL_LIBS=" ${ALL_LIBS} $(get_ldd_lib ${toolchain_dir}/bin/arm-linux-gnueabihf-gcc) "
	set +e
}

__copy_host_binaries_to_chroot() {
	# ========================================
	# Copy all binaries in XBINS to the chroot
	# ========================================
	do_log "Replace arm binaries with host ${xarch} alternatives"

	for executable in ${XBINS} ; do
		# Determine the binaries to patch
		CBIN=$(ch_exec "which ${executable}")
		XBIN=$(which ${executable})
		export executable CBIN XBIN

		# Copy the host binary to the chroot,
		# and rename the corresponding native binary
		# so that both are suffixed with the CPU architecture
		cp "${XBIN}"           "${CHROOT}/${CBIN}-${xarch}"
		mv "${CHROOT}/${CBIN}" "${CHROOT}/${CBIN}-${carch}"

		# Now link the default binary name to the host binary
		do_log "Linking ${executable}-${xarch} as ${executable}"
		( cd $(dirname ${CHROOT}/${CBIN}); ln -sf ${executable}-${xarch} ${executable} )

		# Record the patched binaries in ALL_LIBS
		ALL_LIBS+=" $(get_ldd_lib ${XBIN}) "
	done

	# =============================
	# Special patches for the shell
	# =============================
	do_log "Replacing dash for bash"
	(cd ${CHROOT}/bin; ln -sf bash sh)
}

__fix_libraries() {
	# =====================
	# Fix library locations
	# =====================
	do_log '"Fixing" library locations s,lib,lab,'

	for libname in $(echo ${ALL_LIBS}|sort|uniq) ; do
		DNAME="${CHROOT}/$(dirname ${libname}|sed -e 's,lib,lab,')"
		mkdir -p ${DNAME}
		do_log "copy host to chroot: ${libname} -> ${DNAME}"
		cp  ${libname}* ${DNAME}
	done

	# now fix ld-linux to search into /lab /lab64 and other "labs" err libs hehe
	mkdir -p ${CHROOT}/lib64
	for libname in $(ldconfig -p|grep /ld-|cut -d '>' -f 2|sort|uniq) ; do
		DNAME=${CHROOT}/$(dirname $libname)
		mkdir -p ${DNAME}
		cp  ${libname}* $DNAME
		sed -i 's,/lib,/lab,g' ${CHROOT}${libname}*
	done

	# debian has ld-linux-x86-64.so.2 as link only in /lib64 so re-create it
	# for opensuse it will just fail with no issues
	(cd ${CHROOT}/lib64 ; ln -sf /lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 ld-linux-x86-64.so.2 2>/dev/null)
}

# -----------------------------------------------
# Apply additional patches to make everything
# behave as expected inside the chroot, e.g.
# patching the .bashrc file to set the correct
# environment variables.
# -----------------------------------------------
section:apply_additional_patches() {
	__patch_bashrc
}

__patch_bashrc() {
	do_log "Creating initial bashrc"
	cat << EOF >> ${CHROOT}/etc/bash.bashrc
QEMU_CPU=${QEMU_CPU}
LC_ALL=${LC_ALL}
CC=arm-linux-gnueabihf-gcc
CXX=arm-linux-gnueabihf-g++
PATH=/usr/cross/gcc-linaro-arm-linux-gnueabihf-raspbian/bin:$PATH
export PATH CC CXX QEMU_CPU LC_ALL
alias ls="ls --color=auto"
alias l="ls -la"
alias ll="ls -la"
alias cd..="cd .."
alias ..="cd .."
alias ...="cd ../.."
EOF
}

# ------------------------------------------------
# Do all necessary cleanup actions like unmounting
# ${CHROOT}/dev/proc
# ------------------------------------------------
section:cleanup() {
	__unmount_proc
}

# ------------------------------------------------
# The ':all' function is the entrypoint to
# everything else in this bash script
# ------------------------------------------------
:all

